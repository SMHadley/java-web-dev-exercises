package exercises.BookLearnin.Chap4;

import java.util.*;


Is information accessible at certain levels with certain access modifiers?

Modifier	                                        Class	    Package	    World

public	                                             Yes 	    Yes	        Yes
protected	                                         Yes	    Yes	        No
(no modifier, aka package-private or default)	     Yes	    Yes	        No
private	                                             Yes	    No	        No

4.3 Encapsulation
Object-oriented programming stands on four pillars: abstraction, encapsulation, inheritance, and polymorphism.

Encapsulation is the bundling of related data and behaviors that operate on that data, usually with restricted access to internal, non-public data and behaviors.

We previously defined a field as a variable, or piece of data, that belongs to a class.
While they may be declared anywhere within a class, fields should always be declared at the top of the class.
Like variables within a method, fields may be initialized when they are declared.
As a rule-of-thumb, fields should always be private unless you have a very, very, very good reason to not make them so.

In order to provide access to private fields, getter and setter methods are used.
Getters and setters do what you might guess: get and set a given field.
If we make the getter and/or setter method for a given property public, then others will be able to access or modify the field in that way.

There are lots of reasons to use getters and setters to control access. Here are just a few:
1) Sometimes you’ll want to implement behavior that happens every time a field is accessed (get) or changed (set).
Even if you can’t think of such a reason when writing your class, you might later have the need to add such behavior.
If you don’t use getters and setters, you’ll have to do a lot more refactoring if you ever decide to add such behaviors.

2) You can perform validation within a setter.
For example, we might want to ensure that a student’s name contains only certain characters, or that their student ID is positive.

3) You can use different access modifiers on getters and setters for the same field, based on desired usage.
For example, you might want to allow anyone to be able to read the value of a field, but only classes within the same package to modify it.
You could do this with a public getter and a package-private setter, but not as a field without getters and setters,
which could only be public to everyone or package-private to everyone.

When writing getters and setters, the convention for a field named field is to name them getField and setField.
This is more than just a convention, as some libraries you use will expect names to be of this format, and won’t work as desired if you don’t follow the convention

4.3.2.3. Properties

A property in Java is a characteristic that users can set.
Most often, properties will be fields that have public setters, though they need not have a corresponding field.

4.4. Constructors

Constructors allow us to initialize, or set the initial value of, some of our fields when creating a new object from a class.
In Java, constructors have the same name as the class and are most often declared public (though they can have any other valid access modifier).
They are declared without a return type. Any function that is named the same as the class and has no return type is a constructor.


Chap 6 - UNIT TESTING

TDD helps us create a checklist of what to do.

Does the cat have a name = Does the class variable name get set properly?

import static org.junit.Assert.assertEquals;


public class CatTests {
Cat myCat;
Scanner scanner;

@Before                             /* Initialization should occur within ONE Before tag */
public void setUpCatTests() {
this.myCat = new Cat("Bella", 7);
this.scanner = new Scanner(System.in);
}

@Test                               /* Annotation */
public void catsNameGetsSet() {
Cat myCat = new Cat("Bella");
String expected = "Bella";          /* expected values are hardcoded */
String actual = myCat.getMyCatsName();
assertEquals( expected , actual );
}

@Test
public void catReturnsMeow() {
    Cat myCat = new Cat("Bella", 7);
    String expected = "Meow";
    String actual = myCat.garfieldMeows();
    assertEquals(expected, actual);
}
@After
public void tearDownCatTests() {
this.scanner.close();
}
}

assertEqual
assertTrue = boolean true
assertFalse = boolean false